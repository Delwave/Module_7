import os
import shutil
import time
import threading
import tkinter as tk
from tkinter import filedialog, messagebox

class FileMoverApp:
    def __init__(self, root):
        self.root = root
        self.root.title("File Mover")
        self.root.geometry("400x250")
        self.root.resizable(False, False)

        # Переменные
        self.source_path = tk.StringVar()
        self.dest_path = tk.StringVar()
        self.running = False

        # Интерфейс
        tk.Label(root, text="Папка-источник:").pack(pady=5)
        tk.Entry(root, textvariable=self.source_path, width=40).pack()
        tk.Button(root, text="Выбрать...", command=self.choose_source).pack()

        tk.Label(root, text="Папка-назначение:").pack(pady=5)
        tk.Entry(root, textvariable=self.dest_path, width=40).pack()
        tk.Button(root, text="Выбрать...", command=self.choose_dest).pack()

        tk.Button(root, text="▶ Запустить", command=self.start).pack(pady=10)
        tk.Button(root, text="■ Остановить", command=self.stop).pack()

    def choose_source(self):
        folder = filedialog.askdirectory()
        if folder:
            self.source_path.set(folder)

    def choose_dest(self):
        folder = filedialog.askdirectory()
        if folder:
            self.dest_path.set(folder)

    def move_files(self):
        while self.running:
            src = self.source_path.get()
            dst = self.dest_path.get()

            if os.path.isdir(src) and os.path.isdir(dst):
                for filename in os.listdir(src):
                    src_file = os.path.join(src, filename)
                    dst_file = os.path.join(dst, filename)

                    if os.path.isfile(src_file) and not os.path.exists(dst_file):
                        try:
                            shutil.move(src_file, dst_file)
                        except Exception as e:
                            print(f"Ошибка перемещения {filename}: {e}")
            else:
                print("Неверный путь к папке.")

            # Ждем 1 час
            for _ in range(3600):
                if not self.running:
                    break
                time.sleep(1)

    def start(self):
        if not self.source_path.get() or not self.dest_path.get():
            messagebox.showwarning("Ошибка", "Укажите обе папки!")
            return
        self.running = True
        threading.Thread(target=self.move_files, daemon=True).start()
        messagebox.showinfo("Статус", "Автоперенос файлов запущен.")

    def stop(self):
        self.running = False
        messagebox.showinfo("Статус", "Автоперенос файлов остановлен.")

if __name__ == "__main__":
    root = tk.Tk()
    app = FileMoverApp(root)
    root.mainloop()