import os
import shutil
import time
import threading
import tkinter as tk
from tkinter import filedialog, messagebox
from datetime import datetime
import pystray
from PIL import Image, ImageDraw

LOG_FILE = "log.txt"

def log(message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {message}\n")

class FileMoverApp:
    def __init__(self, root):
        self.root = root
        self.root.title("File Mover")
        self.root.geometry("420x320")
        self.root.resizable(False, False)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.source_path = tk.StringVar()
        self.dest_path = tk.StringVar()
        self.running = False
        self.tray_icon = None

        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        tk.Label(root, text="–ü–∞–ø–∫–∞-–∏—Å—Ç–æ—á–Ω–∏–∫:").pack(pady=5)
        tk.Entry(root, textvariable=self.source_path, width=45).pack()
        tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å...", command=self.choose_source).pack()

        tk.Label(root, text="–ü–∞–ø–∫–∞-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:").pack(pady=5)
        tk.Entry(root, textvariable=self.dest_path, width=45).pack()
        tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å...", command=self.choose_dest).pack()

        self.start_btn = tk.Button(root, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.start)
        self.start_btn.pack(pady=5)

        self.stop_btn = tk.Button(root, text="‚ñ† –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop, state=tk.DISABLED)
        self.stop_btn.pack()

        tk.Button(root, text="‚ùì FAQ", command=self.show_faq).pack(pady=5)

        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(root, text="–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg="red")
        self.status_label.pack(side=tk.BOTTOM, pady=10)

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.hide_window)

    def choose_source(self):
        folder = filedialog.askdirectory()
        if folder:
            self.source_path.set(folder)

    def choose_dest(self):
        folder = filedialog.askdirectory()
        if folder:
            self.dest_path.set(folder)

    def check_path_access(self, path, write=False):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
        if not os.path.isdir(path):
            return False, "–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        if not os.access(path, os.R_OK):
            return False, "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ"
        if write and not os.access(path, os.W_OK):
            return False, "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å"
        return True, ""

    def move_files(self):
        while self.running:
            src = self.source_path.get()
            dst = self.dest_path.get()

            ok_src, err_src = self.check_path_access(src)
            ok_dst, err_dst = self.check_path_access(dst, write=True)

            if not ok_src:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ò—Å—Ç–æ—á–Ω–∏–∫: {err_src}")
                log(f"–û–®–ò–ë–ö–ê: –ò—Å—Ç–æ—á–Ω–∏–∫ - {err_src}")
                self.stop()
                return
            if not ok_dst:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {err_dst}")
                log(f"–û–®–ò–ë–ö–ê: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ - {err_dst}")
                self.stop()
                return

            for filename in os.listdir(src):
                src_file = os.path.join(src, filename)
                dst_file = os.path.join(dst, filename)

                if os.path.isfile(src_file) and not os.path.exists(dst_file):
                    try:
                        shutil.move(src_file, dst_file)
                        log(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω —Ñ–∞–π–ª: {src_file} ‚Üí {dst_file}")
                    except Exception as e:
                        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {filename}: {e}"
                        messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                        log(f"–û–®–ò–ë–ö–ê: {error_msg}")

            log("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞...")
            for _ in range(3600):
                if not self.running:
                    break
                time.sleep(1)

    def start(self):
        if not self.source_path.get() or not self.dest_path.get():
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –æ–±–µ –ø–∞–ø–∫–∏!")
            return

        self.running = True
        self.start_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω–æ", fg="green")

        log("=== –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ ===")
        threading.Thread(target=self.move_files, daemon=True).start()

    def stop(self):
        self.running = False
        self.start_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        self.status_label.config(text="–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg="red")
        log("=== –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ===")

    def show_faq(self):
        faq_text = (
            "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
            "1. –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É-–∏—Å—Ç–æ—á–Ω–∏–∫ (–≥–¥–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã).\n"
            "2. –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å —Ñ–∞–π–ª—ã).\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å' ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç\n"
            "   –±—É–¥–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.\n"
            "4. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—É—Ç–∏ –∏–ª–∏ –ø—Ä–∞–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
            "   –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.\n"
            "5. –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–µ —Å–≤–µ—Ä–Ω–∏—Ç–µ –æ–∫–Ω–æ –≤ —Ç—Ä–µ–π.\n\n"
            "üí° –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª log.txt."
        )
        messagebox.showinfo("FAQ", faq_text)

    def hide_window(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–µ–π"""
        self.root.withdraw()
        if not self.tray_icon:
            image = self.create_icon()
            menu = pystray.Menu(
                pystray.MenuItem("–û—Ç–∫—Ä—ã—Ç—å", self.show_window),
                pystray.MenuItem("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self.stop),
                pystray.MenuItem("–í—ã—Ö–æ–¥", self.exit_app)
            )
            self.tray_icon = pystray.Icon("FileMover", image, "File Mover", menu)
            threading.Thread(target=self.tray_icon.run, daemon=True).start()

    def show_window(self, icon=None, item=None):
        self.root.deiconify()
        if self.tray_icon:
            self.tray_icon.stop()
            self.tray_icon = None

    def create_icon(self):
        """–°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç—Ä–µ—è"""
        image = Image.new("RGB", (64, 64), "blue")
        d = ImageDraw.Draw(image)
        d.rectangle([16, 16, 48, 48], fill="white")
        return image

    def exit_app(self, icon=None, item=None):
        self.stop()
        if self.tray_icon:
            self.tray_icon.stop()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = FileMoverApp(root)
    root.mainloop()